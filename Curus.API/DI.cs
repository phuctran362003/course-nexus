using Curus.Repository;
using Curus.Repository.Entities;
using Curus.Repository.Helper;
using Curus.Repository.Interfaces;
using Curus.Repository.Repositories;
using Curus.Repository.ViewModels.Enum;
using Curus.Service.Interfaces;
using Curus.Service.Services;
using Hangfire;
using Microsoft.AspNetCore.Authentication.Google;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Models;
using System.Reflection;
using System.Security.Claims;
using System.Text;
using System.Text.Json.Serialization;

namespace Curus.API
{
    public static class DI
    {
        public static IServiceCollection AddWebAPIService(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddControllers()
                .AddJsonOptions(options =>
                {
                    options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
                    options.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.Never;
                    options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());
                });

            services.AddEndpointsApiExplorer();
            services.AddHttpContextAccessor();
            services.AddControllersWithViews();
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "Cursus Web API", Version = "v1" });

                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    In = ParameterLocation.Header,
                    Description = "Please enter into field the word 'Bearer' followed by space and JWT",
                    Name = "Authorization",
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer"
                });
                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        },
                        new string[] { }
                    }
                });

                // Locate the XML file being generated by ASP.NET Core
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                // Tell Swagger to use those XML comments.
                c.IncludeXmlComments(xmlPath);

                // Configure Swagger to display enums as strings
                c.MapType<CardProviderEnum>(() => new OpenApiSchema
                {
                    Type = "string",
                    Enum = new List<IOpenApiAny>
                    {
                        new OpenApiString(CardProviderEnum.Visa.ToString()),
                        new OpenApiString(CardProviderEnum.MasterCard.ToString()),
                        new OpenApiString(CardProviderEnum.AmericanExpress.ToString()),
                        new OpenApiString(CardProviderEnum.Discover.ToString())
                    }
                });
            });

            // Configure JWT authentication
            var key = Encoding.ASCII.GetBytes(configuration["JwtSettings:SecretKey"]);
            services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
            })
                .AddJwtBearer(options =>
                {
                    options.RequireHttpsMetadata = false;
                    options.SaveToken = true;
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuerSigningKey = true,
                        IssuerSigningKey = new SymmetricSecurityKey(key),
                        ValidateIssuer = true,
                        ValidateAudience = true,
                        ValidIssuer = configuration["JwtSettings:Issuer"],
                        ValidAudience = configuration["JwtSettings:Audience"],
                        ClockSkew = TimeSpan.Zero
                    };
                })
                .AddCookie()
                .AddGoogle(GoogleDefaults.AuthenticationScheme, o =>
                {
                    o.ClientId = configuration["Authentication:Google:ClientId"];
                    o.ClientSecret = configuration["Authentication:Google:ClientSecret"];
                    o.CallbackPath = new PathString("/signin-google");
                });

            services.AddAuthorization(options =>
            {
                options.AddPolicy("UserPolicy", policy =>
                    policy.RequireClaim(ClaimTypes.Role, "User"));
                options.AddPolicy("AdminPolicy", policy =>
                    policy.RequireClaim(ClaimTypes.Role, "Admin"));
                options.AddPolicy("InstructorPolicy", policy =>
                    policy.RequireClaim(ClaimTypes.Role, "Instructor"));
            });

            // Add custom services
            services.AddScoped<IEmailService, EmailService>();
            services.AddScoped<IUserService, UserService>();
            services.AddScoped<IBlobService, BlobService>();
            services.AddSingleton<IConfiguration>(configuration);
            services.AddScoped<ICategoryRepository, CategoryRepository>();
            services.AddScoped<ICategoryService, CategoryService>();

            // Add logging
            services.AddLogging();

            // Add Identity and configure DbContext
            services.AddDbContext<CursusDbContext>(options =>
            {
                var connection = configuration.GetConnectionString("LocalDB");
                options.UseSqlServer(connection);
            });
            services.AddHangfire(config =>
                config.UseSqlServerStorage(configuration.GetConnectionString("LocalDB")));

            services.AddAutoMapper(typeof(ApplicationMapping).Assembly);

            // Add Service
            services.AddScoped<IUserService, UserService>();
            services.AddScoped<IInstructorService, InstructorService>();
            services.AddSingleton<PasswordService>();
            services.AddScoped<IAuthService, AuthService>();
            services.AddScoped<IChapterService, ChapterService>();
            services.AddScoped<ICourseService, CourseService>();
            services.AddScoped<IVideoService, VideoService>();
            services.AddScoped<IDiscountService, DiscountService>();
            services.AddScoped<IReportFeedbackService, ReportFeedbackService>();
            services.AddScoped<IRedisService, RedisService>();

            // Add OrderService
            services.AddScoped<IOrderService, OrderService>();

            // Add Repo
            services.AddScoped<IUserRepository, UserRepository>();
            services.AddScoped<IAuthRepository, AuthRepository>();
            services.AddScoped<IInstructorRepository, InstructorRepository>();
            services.AddScoped<IChapterRepository, ChapterRepository>();
            services.AddScoped<ICourseRepository, CourseRepository>();
            services.AddScoped<IBackUpCourseRepository, BackUpCourseRepository>();
            services.AddScoped<IBackUpChapterRepository, BackUpChapterRepository>();
            services.AddScoped<IStudentInCourseRepository, StudentInCourseRepository>();
            services.AddScoped<IInstructorPayoutRepository, InstructorPayoutRepository>();
            services.AddScoped<IHistoryCourseRepository, HistoryCourseRepository>();
            services.AddScoped<IFeedBackRepository, FeedBackRepository>();
            services.AddScoped<IReportRepository, ReportRepository>();
            services.AddScoped<IDiscountRepository, DiscountRepository>();
            services.AddScoped<IOrderDetailRepository, OrderDetailRepository>();
            services.AddScoped<IReportFeedbackRepository, ReportFeedbackRepository>();

            // Register logging
            services.AddLogging();



            // Inject AccessToken Generate
            services.AddSingleton<TokenGenerators>();

            services.AddScoped<IPasswordHasher<User>, PasswordHasher<User>>();
            services.AddScoped<RedisService>(provider =>
                new RedisService(configuration)); // Ensure RedisService gets the configuration

            // Inject VideoService
            services.AddSingleton<VideoService>();

            // Inject Email Template
            services.AddSingleton<IEmailTemplateService, EmailTemplateService>();
            services.AddScoped<IEmailService, EmailService>();
            services.AddControllers();

            // Inject Payout Service
            services.AddScoped<IPayoutService, PayoutService>();

            // Inject OTP Service
            services.AddScoped<IOtpService, OtpService>();

            // Inject Storing Service
            services.AddScoped<ITemporaryStoreService, TemporaryStoreService>();

            return services;
        }
    }
}
